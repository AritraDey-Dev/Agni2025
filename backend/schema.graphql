# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type about {
  id: ID!
  route: String
  title: String
  description: String
  link: String
}

input aboutWhereUniqueInput {
  id: ID
}

input aboutWhereInput {
  AND: [aboutWhereInput!]
  OR: [aboutWhereInput!]
  NOT: [aboutWhereInput!]
  id: IDFilter
  route: StringFilter
  title: StringFilter
  description: StringFilter
  link: StringFilter
}

input aboutOrderByInput {
  id: OrderDirection
  route: OrderDirection
  title: OrderDirection
  description: OrderDirection
  link: OrderDirection
}

input aboutUpdateInput {
  route: String
  title: String
  description: String
  link: String
}

input aboutUpdateArgs {
  where: aboutWhereUniqueInput!
  data: aboutUpdateInput!
}

input aboutCreateInput {
  route: String
  title: String
  description: String
  link: String
}

type conferenceTheme {
  id: ID!
  title: String
}

input conferenceThemeWhereUniqueInput {
  id: ID
}

input conferenceThemeWhereInput {
  AND: [conferenceThemeWhereInput!]
  OR: [conferenceThemeWhereInput!]
  NOT: [conferenceThemeWhereInput!]
  id: IDFilter
  title: StringFilter
}

input conferenceThemeOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input conferenceThemeUpdateInput {
  title: String
}

input conferenceThemeUpdateArgs {
  where: conferenceThemeWhereUniqueInput!
  data: conferenceThemeUpdateInput!
}

input conferenceThemeCreateInput {
  title: String
}

type organizingCommittee {
  id: ID!
  name: String
  category: String
  designation: String
  dept: String
  desc: String
  photoUrl: String
}

input organizingCommitteeWhereUniqueInput {
  id: ID
}

input organizingCommitteeWhereInput {
  AND: [organizingCommitteeWhereInput!]
  OR: [organizingCommitteeWhereInput!]
  NOT: [organizingCommitteeWhereInput!]
  id: IDFilter
  name: StringFilter
  category: StringNullableFilter
  designation: StringFilter
  dept: StringFilter
  desc: StringFilter
  photoUrl: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input organizingCommitteeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  category: OrderDirection
  designation: OrderDirection
  dept: OrderDirection
  desc: OrderDirection
  photoUrl: OrderDirection
}

input organizingCommitteeUpdateInput {
  name: String
  category: String
  designation: String
  dept: String
  desc: String
  photoUrl: String
}

input organizingCommitteeUpdateArgs {
  where: organizingCommitteeWhereUniqueInput!
  data: organizingCommitteeUpdateInput!
}

input organizingCommitteeCreateInput {
  name: String
  category: String
  designation: String
  dept: String
  desc: String
  photoUrl: String
}

type technicalCommittee {
  id: ID!
  name: String
  designation: String
  dept: String
  institute: String
}

input technicalCommitteeWhereUniqueInput {
  id: ID
}

input technicalCommitteeWhereInput {
  AND: [technicalCommitteeWhereInput!]
  OR: [technicalCommitteeWhereInput!]
  NOT: [technicalCommitteeWhereInput!]
  id: IDFilter
  name: StringFilter
  designation: StringFilter
  dept: StringFilter
  institute: StringFilter
}

input technicalCommitteeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  designation: OrderDirection
  dept: OrderDirection
  institute: OrderDirection
}

input technicalCommitteeUpdateInput {
  name: String
  designation: String
  dept: String
  institute: String
}

input technicalCommitteeUpdateArgs {
  where: technicalCommitteeWhereUniqueInput!
  data: technicalCommitteeUpdateInput!
}

input technicalCommitteeCreateInput {
  name: String
  designation: String
  dept: String
  institute: String
}

type sponsorship {
  id: ID!
  type: String
  amount: Int
  delegates: Int
  stallarea: Int
  backdropBanner: Boolean
  presentationSlot: Boolean
  addvertisement: String
}

input sponsorshipWhereUniqueInput {
  id: ID
}

input sponsorshipWhereInput {
  AND: [sponsorshipWhereInput!]
  OR: [sponsorshipWhereInput!]
  NOT: [sponsorshipWhereInput!]
  id: IDFilter
  type: StringFilter
  amount: IntFilter
  delegates: IntFilter
  stallarea: IntFilter
  backdropBanner: BooleanFilter
  presentationSlot: BooleanFilter
  addvertisement: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input sponsorshipOrderByInput {
  id: OrderDirection
  type: OrderDirection
  amount: OrderDirection
  delegates: OrderDirection
  stallarea: OrderDirection
  backdropBanner: OrderDirection
  presentationSlot: OrderDirection
  addvertisement: OrderDirection
}

input sponsorshipUpdateInput {
  type: String
  amount: Int
  delegates: Int
  stallarea: Int
  backdropBanner: Boolean
  presentationSlot: Boolean
  addvertisement: String
}

input sponsorshipUpdateArgs {
  where: sponsorshipWhereUniqueInput!
  data: sponsorshipUpdateInput!
}

input sponsorshipCreateInput {
  type: String
  amount: Int
  delegates: Int
  stallarea: Int
  backdropBanner: Boolean
  presentationSlot: Boolean
  addvertisement: String
}

type importantDates {
  id: ID!
  event: String
  date: String
  description: String
  important: Boolean
}

input importantDatesWhereUniqueInput {
  id: ID
}

input importantDatesWhereInput {
  AND: [importantDatesWhereInput!]
  OR: [importantDatesWhereInput!]
  NOT: [importantDatesWhereInput!]
  id: IDFilter
  event: StringFilter
  date: StringFilter
  description: StringFilter
  important: BooleanFilter
}

input importantDatesOrderByInput {
  id: OrderDirection
  event: OrderDirection
  date: OrderDirection
  description: OrderDirection
  important: OrderDirection
}

input importantDatesUpdateInput {
  event: String
  date: String
  description: String
  important: Boolean
}

input importantDatesUpdateArgs {
  where: importantDatesWhereUniqueInput!
  data: importantDatesUpdateInput!
}

input importantDatesCreateInput {
  event: String
  date: String
  description: String
  important: Boolean
}

type registrationDetails {
  id: ID!
  native: String
  particulars: String
  amt_early_bird: Int
  amt_regular: Int
}

input registrationDetailsWhereUniqueInput {
  id: ID
}

input registrationDetailsWhereInput {
  AND: [registrationDetailsWhereInput!]
  OR: [registrationDetailsWhereInput!]
  NOT: [registrationDetailsWhereInput!]
  id: IDFilter
  native: StringNullableFilter
  particulars: StringFilter
  amt_early_bird: IntFilter
  amt_regular: IntFilter
}

input registrationDetailsOrderByInput {
  id: OrderDirection
  native: OrderDirection
  particulars: OrderDirection
  amt_early_bird: OrderDirection
  amt_regular: OrderDirection
}

input registrationDetailsUpdateInput {
  native: String
  particulars: String
  amt_early_bird: Int
  amt_regular: Int
}

input registrationDetailsUpdateArgs {
  where: registrationDetailsWhereUniqueInput!
  data: registrationDetailsUpdateInput!
}

input registrationDetailsCreateInput {
  native: String
  particulars: String
  amt_early_bird: Int
  amt_regular: Int
}

type speakers {
  id: ID!
  type: String
  name: String
  designation: String
  title: String
  bio: String
  photoUrl: String
}

input speakersWhereUniqueInput {
  id: ID
}

input speakersWhereInput {
  AND: [speakersWhereInput!]
  OR: [speakersWhereInput!]
  NOT: [speakersWhereInput!]
  id: IDFilter
  type: StringFilter
  name: StringFilter
  designation: StringFilter
  title: StringFilter
  bio: StringFilter
  photoUrl: StringFilter
}

input speakersOrderByInput {
  id: OrderDirection
  type: OrderDirection
  name: OrderDirection
  designation: OrderDirection
  title: OrderDirection
  bio: OrderDirection
  photoUrl: OrderDirection
}

input speakersUpdateInput {
  type: String
  name: String
  designation: String
  title: String
  bio: String
  photoUrl: String
}

input speakersUpdateArgs {
  where: speakersWhereUniqueInput!
  data: speakersUpdateInput!
}

input speakersCreateInput {
  type: String
  name: String
  designation: String
  title: String
  bio: String
  photoUrl: String
}

type toursit {
  id: ID!
  name: String
  location: String
  photoUrl: String
  desc: String
}

input toursitWhereUniqueInput {
  id: ID
}

input toursitWhereInput {
  AND: [toursitWhereInput!]
  OR: [toursitWhereInput!]
  NOT: [toursitWhereInput!]
  id: IDFilter
  name: StringFilter
  location: StringFilter
  photoUrl: StringFilter
  desc: StringFilter
}

input toursitOrderByInput {
  id: OrderDirection
  name: OrderDirection
  location: OrderDirection
  photoUrl: OrderDirection
  desc: OrderDirection
}

input toursitUpdateInput {
  name: String
  location: String
  photoUrl: String
  desc: String
}

input toursitUpdateArgs {
  where: toursitWhereUniqueInput!
  data: toursitUpdateInput!
}

input toursitCreateInput {
  name: String
  location: String
  photoUrl: String
  desc: String
}

type tracks {
  id: ID!
  number: Int
  type: String
  name: String
}

input tracksWhereUniqueInput {
  id: ID
}

input tracksWhereInput {
  AND: [tracksWhereInput!]
  OR: [tracksWhereInput!]
  NOT: [tracksWhereInput!]
  id: IDFilter
  number: IntFilter
  type: StringFilter
  name: StringFilter
}

input tracksOrderByInput {
  id: OrderDirection
  number: OrderDirection
  type: OrderDirection
  name: OrderDirection
}

input tracksUpdateInput {
  number: Int
  type: String
  name: String
}

input tracksUpdateArgs {
  where: tracksWhereUniqueInput!
  data: tracksUpdateInput!
}

input tracksCreateInput {
  number: Int
  type: String
  name: String
}

type eventDetails {
  id: ID!
  name: String
  desc: String
  photoUrl: String
  link: String
}

input eventDetailsWhereUniqueInput {
  id: ID
}

input eventDetailsWhereInput {
  AND: [eventDetailsWhereInput!]
  OR: [eventDetailsWhereInput!]
  NOT: [eventDetailsWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  photoUrl: StringFilter
  link: StringFilter
}

input eventDetailsOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  photoUrl: OrderDirection
  link: OrderDirection
}

input eventDetailsUpdateInput {
  name: String
  desc: String
  photoUrl: String
  link: String
}

input eventDetailsUpdateArgs {
  where: eventDetailsWhereUniqueInput!
  data: eventDetailsUpdateInput!
}

input eventDetailsCreateInput {
  name: String
  desc: String
  photoUrl: String
  link: String
}

type generalInformation {
  id: ID!
  name: String
  desc: String
}

input generalInformationWhereUniqueInput {
  id: ID
}

input generalInformationWhereInput {
  AND: [generalInformationWhereInput!]
  OR: [generalInformationWhereInput!]
  NOT: [generalInformationWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
}

input generalInformationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
}

input generalInformationUpdateInput {
  name: String
  desc: String
}

input generalInformationUpdateArgs {
  where: generalInformationWhereUniqueInput!
  data: generalInformationUpdateInput!
}

input generalInformationCreateInput {
  name: String
  desc: String
}

type subthemes {
  id: ID!
  number: Int
  desc: String
}

input subthemesWhereUniqueInput {
  id: ID
}

input subthemesWhereInput {
  AND: [subthemesWhereInput!]
  OR: [subthemesWhereInput!]
  NOT: [subthemesWhereInput!]
  id: IDFilter
  number: IntFilter
  desc: StringFilter
}

input subthemesOrderByInput {
  id: OrderDirection
  number: OrderDirection
  desc: OrderDirection
}

input subthemesUpdateInput {
  number: Int
  desc: String
}

input subthemesUpdateArgs {
  where: subthemesWhereUniqueInput!
  data: subthemesUpdateInput!
}

input subthemesCreateInput {
  number: Int
  desc: String
}

type notices {
  id: ID!
  title: String
  desc: String
  date: String
  isNew: Boolean
  createdAt: DateTime
}

input noticesWhereUniqueInput {
  id: ID
}

input noticesWhereInput {
  AND: [noticesWhereInput!]
  OR: [noticesWhereInput!]
  NOT: [noticesWhereInput!]
  id: IDFilter
  title: StringFilter
  desc: StringFilter
  date: StringFilter
  isNew: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input noticesOrderByInput {
  id: OrderDirection
  title: OrderDirection
  desc: OrderDirection
  date: OrderDirection
  isNew: OrderDirection
  createdAt: OrderDirection
}

input noticesUpdateInput {
  title: String
  desc: String
  date: String
  isNew: Boolean
  createdAt: DateTime
}

input noticesUpdateArgs {
  where: noticesWhereUniqueInput!
  data: noticesUpdateInput!
}

input noticesCreateInput {
  title: String
  desc: String
  date: String
  isNew: Boolean
  createdAt: DateTime
}

type publications {
  id: ID!
  name: String
  desc: String
  photoUrl: String
}

input publicationsWhereUniqueInput {
  id: ID
}

input publicationsWhereInput {
  AND: [publicationsWhereInput!]
  OR: [publicationsWhereInput!]
  NOT: [publicationsWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  photoUrl: StringFilter
}

input publicationsOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  photoUrl: OrderDirection
}

input publicationsUpdateInput {
  name: String
  desc: String
  photoUrl: String
}

input publicationsUpdateArgs {
  where: publicationsWhereUniqueInput!
  data: publicationsUpdateInput!
}

input publicationsCreateInput {
  name: String
  desc: String
  photoUrl: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createabout(data: aboutCreateInput!): about
  createAbouts(data: [aboutCreateInput!]!): [about]
  updateabout(where: aboutWhereUniqueInput!, data: aboutUpdateInput!): about
  updateAbouts(data: [aboutUpdateArgs!]!): [about]
  deleteabout(where: aboutWhereUniqueInput!): about
  deleteAbouts(where: [aboutWhereUniqueInput!]!): [about]
  createconferenceTheme(data: conferenceThemeCreateInput!): conferenceTheme
  createConferenceThemes(data: [conferenceThemeCreateInput!]!): [conferenceTheme]
  updateconferenceTheme(where: conferenceThemeWhereUniqueInput!, data: conferenceThemeUpdateInput!): conferenceTheme
  updateConferenceThemes(data: [conferenceThemeUpdateArgs!]!): [conferenceTheme]
  deleteconferenceTheme(where: conferenceThemeWhereUniqueInput!): conferenceTheme
  deleteConferenceThemes(where: [conferenceThemeWhereUniqueInput!]!): [conferenceTheme]
  createorganizingCommittee(data: organizingCommitteeCreateInput!): organizingCommittee
  createOrganizingCommittees(data: [organizingCommitteeCreateInput!]!): [organizingCommittee]
  updateorganizingCommittee(where: organizingCommitteeWhereUniqueInput!, data: organizingCommitteeUpdateInput!): organizingCommittee
  updateOrganizingCommittees(data: [organizingCommitteeUpdateArgs!]!): [organizingCommittee]
  deleteorganizingCommittee(where: organizingCommitteeWhereUniqueInput!): organizingCommittee
  deleteOrganizingCommittees(where: [organizingCommitteeWhereUniqueInput!]!): [organizingCommittee]
  createtechnicalCommittee(data: technicalCommitteeCreateInput!): technicalCommittee
  createTechnicalCommittees(data: [technicalCommitteeCreateInput!]!): [technicalCommittee]
  updatetechnicalCommittee(where: technicalCommitteeWhereUniqueInput!, data: technicalCommitteeUpdateInput!): technicalCommittee
  updateTechnicalCommittees(data: [technicalCommitteeUpdateArgs!]!): [technicalCommittee]
  deletetechnicalCommittee(where: technicalCommitteeWhereUniqueInput!): technicalCommittee
  deleteTechnicalCommittees(where: [technicalCommitteeWhereUniqueInput!]!): [technicalCommittee]
  createsponsorship(data: sponsorshipCreateInput!): sponsorship
  createSponsorships(data: [sponsorshipCreateInput!]!): [sponsorship]
  updatesponsorship(where: sponsorshipWhereUniqueInput!, data: sponsorshipUpdateInput!): sponsorship
  updateSponsorships(data: [sponsorshipUpdateArgs!]!): [sponsorship]
  deletesponsorship(where: sponsorshipWhereUniqueInput!): sponsorship
  deleteSponsorships(where: [sponsorshipWhereUniqueInput!]!): [sponsorship]
  createimportantDates(data: importantDatesCreateInput!): importantDates
  createImportantDates(data: [importantDatesCreateInput!]!): [importantDates]
  updateimportantDates(where: importantDatesWhereUniqueInput!, data: importantDatesUpdateInput!): importantDates
  updateImportantDates(data: [importantDatesUpdateArgs!]!): [importantDates]
  deleteimportantDates(where: importantDatesWhereUniqueInput!): importantDates
  deleteImportantDates(where: [importantDatesWhereUniqueInput!]!): [importantDates]
  createregistrationDetails(data: registrationDetailsCreateInput!): registrationDetails
  createRegistrationDetails(data: [registrationDetailsCreateInput!]!): [registrationDetails]
  updateregistrationDetails(where: registrationDetailsWhereUniqueInput!, data: registrationDetailsUpdateInput!): registrationDetails
  updateRegistrationDetails(data: [registrationDetailsUpdateArgs!]!): [registrationDetails]
  deleteregistrationDetails(where: registrationDetailsWhereUniqueInput!): registrationDetails
  deleteRegistrationDetails(where: [registrationDetailsWhereUniqueInput!]!): [registrationDetails]
  createspeakers(data: speakersCreateInput!): speakers
  createSpeakers(data: [speakersCreateInput!]!): [speakers]
  updatespeakers(where: speakersWhereUniqueInput!, data: speakersUpdateInput!): speakers
  updateSpeakers(data: [speakersUpdateArgs!]!): [speakers]
  deletespeakers(where: speakersWhereUniqueInput!): speakers
  deleteSpeakers(where: [speakersWhereUniqueInput!]!): [speakers]
  createtoursit(data: toursitCreateInput!): toursit
  createToursits(data: [toursitCreateInput!]!): [toursit]
  updatetoursit(where: toursitWhereUniqueInput!, data: toursitUpdateInput!): toursit
  updateToursits(data: [toursitUpdateArgs!]!): [toursit]
  deletetoursit(where: toursitWhereUniqueInput!): toursit
  deleteToursits(where: [toursitWhereUniqueInput!]!): [toursit]
  createtracks(data: tracksCreateInput!): tracks
  createTracks(data: [tracksCreateInput!]!): [tracks]
  updatetracks(where: tracksWhereUniqueInput!, data: tracksUpdateInput!): tracks
  updateTracks(data: [tracksUpdateArgs!]!): [tracks]
  deletetracks(where: tracksWhereUniqueInput!): tracks
  deleteTracks(where: [tracksWhereUniqueInput!]!): [tracks]
  createeventDetails(data: eventDetailsCreateInput!): eventDetails
  createEventDetails(data: [eventDetailsCreateInput!]!): [eventDetails]
  updateeventDetails(where: eventDetailsWhereUniqueInput!, data: eventDetailsUpdateInput!): eventDetails
  updateEventDetails(data: [eventDetailsUpdateArgs!]!): [eventDetails]
  deleteeventDetails(where: eventDetailsWhereUniqueInput!): eventDetails
  deleteEventDetails(where: [eventDetailsWhereUniqueInput!]!): [eventDetails]
  creategeneralInformation(data: generalInformationCreateInput!): generalInformation
  createGeneralInformations(data: [generalInformationCreateInput!]!): [generalInformation]
  updategeneralInformation(where: generalInformationWhereUniqueInput!, data: generalInformationUpdateInput!): generalInformation
  updateGeneralInformations(data: [generalInformationUpdateArgs!]!): [generalInformation]
  deletegeneralInformation(where: generalInformationWhereUniqueInput!): generalInformation
  deleteGeneralInformations(where: [generalInformationWhereUniqueInput!]!): [generalInformation]
  createsubthemes(data: subthemesCreateInput!): subthemes
  createSubthemes(data: [subthemesCreateInput!]!): [subthemes]
  updatesubthemes(where: subthemesWhereUniqueInput!, data: subthemesUpdateInput!): subthemes
  updateSubthemes(data: [subthemesUpdateArgs!]!): [subthemes]
  deletesubthemes(where: subthemesWhereUniqueInput!): subthemes
  deleteSubthemes(where: [subthemesWhereUniqueInput!]!): [subthemes]
  createnotices(data: noticesCreateInput!): notices
  createNotices(data: [noticesCreateInput!]!): [notices]
  updatenotices(where: noticesWhereUniqueInput!, data: noticesUpdateInput!): notices
  updateNotices(data: [noticesUpdateArgs!]!): [notices]
  deletenotices(where: noticesWhereUniqueInput!): notices
  deleteNotices(where: [noticesWhereUniqueInput!]!): [notices]
  createpublications(data: publicationsCreateInput!): publications
  createPublications(data: [publicationsCreateInput!]!): [publications]
  updatepublications(where: publicationsWhereUniqueInput!, data: publicationsUpdateInput!): publications
  updatePublications(data: [publicationsUpdateArgs!]!): [publications]
  deletepublications(where: publicationsWhereUniqueInput!): publications
  deletePublications(where: [publicationsWhereUniqueInput!]!): [publications]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  about(where: aboutWhereUniqueInput!): about
  abouts(where: aboutWhereInput! = {}, orderBy: [aboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: aboutWhereUniqueInput): [about!]
  aboutsCount(where: aboutWhereInput! = {}): Int
  conferenceTheme(where: conferenceThemeWhereUniqueInput!): conferenceTheme
  conferenceThemes(where: conferenceThemeWhereInput! = {}, orderBy: [conferenceThemeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: conferenceThemeWhereUniqueInput): [conferenceTheme!]
  conferenceThemesCount(where: conferenceThemeWhereInput! = {}): Int
  organizingCommittee(where: organizingCommitteeWhereUniqueInput!): organizingCommittee
  organizingCommittees(where: organizingCommitteeWhereInput! = {}, orderBy: [organizingCommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: organizingCommitteeWhereUniqueInput): [organizingCommittee!]
  organizingCommitteesCount(where: organizingCommitteeWhereInput! = {}): Int
  technicalCommittee(where: technicalCommitteeWhereUniqueInput!): technicalCommittee
  technicalCommittees(where: technicalCommitteeWhereInput! = {}, orderBy: [technicalCommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: technicalCommitteeWhereUniqueInput): [technicalCommittee!]
  technicalCommitteesCount(where: technicalCommitteeWhereInput! = {}): Int
  sponsorship(where: sponsorshipWhereUniqueInput!): sponsorship
  sponsorships(where: sponsorshipWhereInput! = {}, orderBy: [sponsorshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: sponsorshipWhereUniqueInput): [sponsorship!]
  sponsorshipsCount(where: sponsorshipWhereInput! = {}): Int
  importantDates(where: importantDatesWhereInput! = {}, orderBy: [importantDatesOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: importantDatesWhereUniqueInput): [importantDates!]
  importantDatesCount(where: importantDatesWhereInput! = {}): Int
  registrationDetails(where: registrationDetailsWhereInput! = {}, orderBy: [registrationDetailsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: registrationDetailsWhereUniqueInput): [registrationDetails!]
  registrationDetailsCount(where: registrationDetailsWhereInput! = {}): Int
  speakers(where: speakersWhereInput! = {}, orderBy: [speakersOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: speakersWhereUniqueInput): [speakers!]
  speakersCount(where: speakersWhereInput! = {}): Int
  toursit(where: toursitWhereUniqueInput!): toursit
  toursits(where: toursitWhereInput! = {}, orderBy: [toursitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: toursitWhereUniqueInput): [toursit!]
  toursitsCount(where: toursitWhereInput! = {}): Int
  tracks(where: tracksWhereInput! = {}, orderBy: [tracksOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: tracksWhereUniqueInput): [tracks!]
  tracksCount(where: tracksWhereInput! = {}): Int
  eventDetails(where: eventDetailsWhereInput! = {}, orderBy: [eventDetailsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: eventDetailsWhereUniqueInput): [eventDetails!]
  eventDetailsCount(where: eventDetailsWhereInput! = {}): Int
  generalInformation(where: generalInformationWhereUniqueInput!): generalInformation
  generalInformations(where: generalInformationWhereInput! = {}, orderBy: [generalInformationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: generalInformationWhereUniqueInput): [generalInformation!]
  generalInformationsCount(where: generalInformationWhereInput! = {}): Int
  subthemes(where: subthemesWhereInput! = {}, orderBy: [subthemesOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: subthemesWhereUniqueInput): [subthemes!]
  subthemesCount(where: subthemesWhereInput! = {}): Int
  notices(where: noticesWhereInput! = {}, orderBy: [noticesOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: noticesWhereUniqueInput): [notices!]
  noticesCount(where: noticesWhereInput! = {}): Int
  publications(where: publicationsWhereInput! = {}, orderBy: [publicationsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: publicationsWhereUniqueInput): [publications!]
  publicationsCount(where: publicationsWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
